FAQ - Часто задаваемые вопросы о проекте DriveNext
=====================================================

ОБЩАЯ ИНФОРМАЦИЯ
================

Q: Что это за приложение?
A: DriveNext - это Android приложение для аренды автомобилей, написанное на Kotlin с использованием Jetpack Compose.

Q: Какая архитектура используется в проекте?
A: Проект использует Clean Architecture с разделением на слои:
   - Presentation (UI слой)
   - Domain (бизнес-логика)
   - Data (работа с данными)

Q: Какие технологии используются?
A: 
   - Kotlin + Jetpack Compose для UI
   - MVVM архитектура
   - StateFlow для реактивного программирования
   - SharedPreferences для локального хранения
   - Supabase (пока не настроен) для бэкенда

ПОДКЛЮЧЕНИЕ К ИНТЕРНЕТУ
======================

Q: Как работает проверка подключения к интернету?
A: 
   - Используется класс NetworkConnectivityObserver
   - Отслеживает изменения состояния сети через ConnectivityManager
   - Проверяет не только наличие сети, но и валидацию интернет-соединения
   - При отсутствии интернета показывается экран NoInternetScreen

Q: Где настраивается проверка интернета?
A: В MainActivity.onCreate() - проверяется состояние подключения и показывается соответствующий экран.

Q: Можно ли принудительно проверить подключение?
A: Да, через метод checkConnection() в NetworkConnectivityObserver.

АВТОРИЗАЦИЯ И ХРАНЕНИЕ ДАННЫХ
=============================

Q: Как работает авторизация пользователей?
A: 
   - Данные пользователей сохраняются локально в SharedPreferences
   - При входе проверяется соответствие email и пароля с сохраненными данными
   - Пока нет подключения к внешнему серверу (Supabase не настроен)

Q: Где хранятся данные пользователя?
A: В SharedPreferences через класс UserPreferences:
   - Email, пароль, имя, фамилия
   - Дата рождения, пол
   - Номер водительских прав и дата выдачи

Q: В чем разница между logout() и clearAllData()?
A: 
   - logout() - выходит из аккаунта, но сохраняет данные пользователя
   - clearAllData() - полностью удаляет все данные пользователя

Q: Как проверить, авторизован ли пользователь?
A: Через метод isLoggedIn() в UserPreferences.

НАВИГАЦИЯ
=========

Q: Как работает навигация в приложении?
A: 
   - Используется Jetpack Navigation Compose
   - Стартовый экран определяется статусом авторизации
   - Если пользователь авторизован - показывается MainScreen
   - Если нет - показывается OnboardingScreen

Q: Какие экраны есть в приложении?
A: 
   - OnboardingScreen - приветствие и знакомство с приложением
   - AuthWelcomeScreen - выбор между входом и регистрацией
   - SignInScreen - экран входа
   - SignUpScreen, SignUpStep2Screen, SignUpStep3Screen - многоэтапная регистрация
   - SignUpSuccessScreen - успешная регистрация
   - MainScreen - главный экран приложения
   - NoInternetScreen - экран отсутствия интернета

Q: Как определяется стартовый экран?
A: В DriveNextNavigation проверяется isLoggedIn() и выбирается соответствующий маршрут.

ONBOARDING
==========

Q: Что такое onboarding?
A: Это экран приветствия с тремя слайдами, который показывается новым пользователям.

Q: Можно ли пропустить onboarding?
A: Да, есть кнопка "Пропустить" в правом верхнем углу.

Q: Как работает переключение между слайдами?
A: Используется HorizontalPager с анимацией перехода между страницами.

Q: Что происходит после завершения onboarding?
A: Пользователь переходит к экрану выбора авторизации (AuthWelcomeScreen).

РЕГИСТРАЦИЯ И ВХОД
=================

Q: Как работает регистрация?
A: 
   - Многоэтапный процесс (3 экрана)
   - Собираются личные данные, данные водительских прав
   - Данные сохраняются в SharedPreferences
   - После успешной регистрации показывается экран успеха

Q: Как работает вход в систему?
A: 
   - Проверяется email и пароль
   - Данные сравниваются с сохраненными в SharedPreferences
   - При успешном входе создается объект User и обновляется UI состояние

Q: Есть ли валидация данных?
A: Да, в SignInUseCase проверяется:
   - Email не пустой
   - Пароль не пустой  
   - Email соответствует формату email

ОТЛАДКА И РАЗРАБОТКА
====================

Q: Как посмотреть сохраненные данные пользователя?
A: В MainScreen есть кнопка "Показать данные (DEBUG)" - она выводит все данные в консоль.

Q: Где находятся отладочные сообщения?
A: В консоли Android Studio, ищутся по тегу "DEBUG:".

Q: Как очистить все данные приложения?
A: В MainScreen есть кнопка "Очистить данные и выйти".

Q: Что такое SimpleDI?
A: Это простая система внедрения зависимостей без аннотаций (заменяет Hilt временно).

СТРУКТУРА ПРОЕКТА
=================

Q: Где находятся экраны приложения?
A: В папке app/src/main/java/com/drivenext/app/presentation/screens/

Q: Где находится бизнес-логика?
A: В папке app/src/main/java/com/drivenext/app/domain/

Q: Где находятся модели данных?
A: В папке app/src/main/java/com/drivenext/app/domain/model/

Q: Где настраивается тема приложения?
A: В папке app/src/main/java/com/drivenext/app/presentation/theme/

Q: Где находятся ресурсы (изображения, строки)?
A: В папке app/src/main/res/


ТЕХНИЧЕСКИЕ ДЕТАЛИ
==================

Q: Какая минимальная версия Android поддерживается?
A: Зависит от настроек в build.gradle (обычно API 21+).

Q: Используется ли Hilt для DI?
A: Нет, пока используется простая система SimpleDI без аннотаций.

Q: Есть ли тесты в проекте?
A: Пока тесты не написаны, это планируется добавить.

Q: Как собрать проект?
A: Используйте стандартную команду Gradle: ./gradlew assembleDebug

Q: Где находится APK файл после сборки?
A: В папке app/build/outputs/apk/debug/app-debug.apk
